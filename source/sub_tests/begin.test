TEST_CASE("begin returns an iterator to the first list node", "[getting_iterators]") {
  List<int> list{};

  SECTION("an empty list returns an iterator which holds a nullptr") {
    REQUIRE(true == list.empty());
    REQUIRE(nullptr == get_node_pointer<int>(list.begin()) );
  }

  list.push_front(9123);
  SECTION("calling begin of a non empty list should give us an iterator to the first element in the list") {
    REQUIRE(false == list.empty());
    REQUIRE(1 == list.size());

    auto begin_iterator = list.begin();

    REQUIRE(nullptr != get_node_pointer<int>(begin_iterator));
    REQUIRE(9123 == list.front());
    REQUIRE(9123 == list.back());
    REQUIRE(9123 == get_node_pointer<int>(begin_iterator)->value);
    REQUIRE(get_first_pointer(list) == get_node_pointer<int>(begin_iterator));
    REQUIRE(1 == list.size());
  }

  list.push_front(1000);
  SECTION(" pushed element should be readable and writeable and should not change size of list (also for 2 elements)") {
    REQUIRE(2 == list.size());
    REQUIRE(false == list.empty());
    
    auto begin_iterator = list.begin();
    REQUIRE(nullptr != get_node_pointer<int>(begin_iterator) );
    REQUIRE(1000 == get_node_pointer<int>(begin_iterator)->value);
    REQUIRE(1000 == list.front());
    REQUIRE(9123 == list.back());
    REQUIRE(get_first_pointer(list) == get_node_pointer<int>(begin_iterator) );
    REQUIRE(get_last_pointer(list)  != get_node_pointer<int>(begin_iterator) );

    list.back() = 1;
    REQUIRE(false == list.empty());
    REQUIRE(2 == list.size());
  }


}